// Generated by CoffeeScript 1.6.3
(function() {
  var exports, format, moment, vCalendar, vDateProperty, vEvent, vObject, vProperty, vStringProperty, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  format = require('util').format;

  _ = require('underscore');

  moment = require('moment');

  vProperty = (function() {
    function vProperty(key, value) {
      this.key = key;
      this.value = value;
      this.toICS = __bind(this.toICS, this);
    }

    vProperty.prototype.escape = function(str) {
      return str.replace(/\r\n/g, '\\n').replace(/;/g, '\\;').replace(/\r/g, '\\n').replace(/\n/g, '\\n').replace(/,/g, '\\,');
    };

    vProperty.prototype.wrap = function(line) {
      var i, lines, number_of_lines, part, _i;
      lines = [];
      number_of_lines = Math.ceil(line.length / 75) - 1;
      for (i = _i = 0; 0 <= number_of_lines ? _i <= number_of_lines : _i >= number_of_lines; i = 0 <= number_of_lines ? ++_i : --_i) {
        part = line.substring(i * 75, Math.min((i + 1) * 75, line.length));
        lines.push(part);
      }
      return lines.join("\r\n ");
    };

    vProperty.prototype.stringifyValue = function() {
      return this.value;
    };

    vProperty.prototype.stringifyKey = function() {
      return this.key;
    };

    vProperty.prototype.toICS = function() {
      var line;
      line = this.stringifyKey().toUpperCase() + ":" + this.escape(this.stringifyValue());
      return this.wrap(line) + "\r\n";
    };

    return vProperty;

  })();

  vStringProperty = (function(_super) {
    __extends(vStringProperty, _super);

    function vStringProperty(key, value) {
      this.key = key;
      this.value = value;
    }

    return vStringProperty;

  })(vProperty);

  vDateProperty = (function(_super) {
    __extends(vDateProperty, _super);

    function vDateProperty(key, value, allday) {
      this.key = key;
      this.value = value;
      this.allday = allday != null ? allday : false;
    }

    vDateProperty.prototype.stringifyValue = function() {
      if (this.allday) {
        return moment(this.value).format('YYYYMMDD');
      } else {
        return moment(this.value).utc().format('YYYYMMDDTHHmmss') + 'Z';
      }
    };

    vDateProperty.prototype.stringifyKey = function() {
      if (this.allday) {
        return this.key + ";VALUE=DATE";
      } else {
        return this.key;
      }
    };

    return vDateProperty;

  })(vProperty);

  vObject = (function() {
    function vObject(type) {
      this.type = type;
      this.toICS = __bind(this.toICS, this);
      this.set = __bind(this.set, this);
      this.addComponent = __bind(this.addComponent, this);
      this.addProperty = __bind(this.addProperty, this);
      this.properties = [];
      this.components = [];
      this.type = this.type.toUpperCase();
    }

    vObject.prototype.addProperty = function(prop) {
      return this.properties.push(prop);
    };

    vObject.prototype.addComponent = function(comp) {
      return this.components.push(comp);
    };

    vObject.prototype.set = function(key, value) {
      var prop;
      if (_.isNumber(value)) {
        value = +value;
      }
      prop = null;
      if (_.isString(value)) {
        prop = new vStringProperty(key, value);
      } else if (_.isObject(value)) {
        prop = new vDateProperty(key, value, false);
      }
      return this.addProperty(prop);
    };

    vObject.prototype.setDate = function(key, value, allday) {
      if (allday == null) {
        allday = false;
      }
      return this.addProperty(new vDateProperty(key, value, allday));
    };

    vObject.prototype.toICS = function() {
      var comps, props;
      props = this.properties.map(function(x) {
        return x.toICS();
      });
      comps = this.components.map(function(x) {
        return x.toICS();
      });
      return ("BEGIN:" + this.type + "\r\n") + props.join("") + comps.join('') + ("END:" + this.type + "\r\n");
    };

    return vObject;

  })();

  vEvent = (function(_super) {
    __extends(vEvent, _super);

    function vEvent() {
      vEvent.__super__.constructor.call(this, 'VEVENT');
    }

    return vEvent;

  })(vObject);

  vCalendar = (function(_super) {
    __extends(vCalendar, _super);

    function vCalendar(generator, calscale) {
      if (generator == null) {
        generator = 'Fast vCalendar for node.js';
      }
      if (calscale == null) {
        calscale = 'GREGORIAN';
      }
      this.addEvent = __bind(this.addEvent, this);
      vCalendar.__super__.constructor.call(this, 'VCALENDAR');
      this.set("version", "2.0");
      this.set("calscale", calscale);
      this.set("prodid", "-//" + generator + "//EN");
    }

    vCalendar.prototype.addEvent = function(event) {
      return this.addComponent(event);
    };

    return vCalendar;

  })(vObject);

  module.exports = exports = {
    vCalendar: vCalendar,
    vEvent: vEvent,
    vDateProperty: vDateProperty,
    vStringProperty: vStringProperty,
    vProperty: vProperty
  };

}).call(this);
